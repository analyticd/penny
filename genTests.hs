-- | Pulls all module names from the tests directory.  Generates a
-- Main that imports all these files (so they all get compiled) and
-- that puts the tests into a Tasty tree.

module Main where

import Cartel.Tools (modulesWithExtensions)
import Data.List (intersperse, isSuffixOf)

extensions :: [String]
extensions = ["hs", "lhs"]

main :: IO ()
main = do
  ms <- modulesWithExtensions extensions "tests"
  putStr $ mainText ms

-- | Creates the text of a Main file.
mainText
  :: [String]
  -- ^ All modules
  -> String
  -- ^ Module text
mainText ms = concat . intersperse "\n" $
  [ moduleHeader
  , allImports ms
  , testTree (filter (".Tests" `isSuffixOf`) ms)
  , mainFunction
  ]

mainFunction :: String
mainFunction = unlines
  [ "main :: IO ()"
  , "main = Test.Tasty.defaultMain testTree"
  ]

-- | Creates an @import@ line for a given module.
importStmt
  :: String
  -- ^ Module name
  -> String
  -- ^ Import statement
importStmt mdle = "import qualified " ++ mdle ++ "\n"

allImports
  :: [String]
  -- ^ All module names
  -> String
allImports ms = concatMap importStmt ms
  ++ "import qualified Test.Tasty\n"

-- | Module header.  Contains an OPTIONS_GHC pragma to ignore unused
-- imports, a Main module statement, and a space.
moduleHeader :: String
moduleHeader = unlines
  [ "{-# OPTIONS_GHC -fno-warn-unused-imports #-}"
  , "-- This module generated by the genTests.hs program."
  , "module Main where"
  ]

-- | Creates TestTree function.
testTree
  :: [String]
  -- ^ All test modules
  -> String
testTree ms = sig ++ line1 ++ testList ms
  where
    sig = "testTree :: Test.Tasty.TestTree\n"
    line1 = "testTree = Test.Tasty.testGroup \"All tests\"\n"

-- | Creates the list of tests for the testTree function.
testList
  :: [String]
  -- ^ All test modules
  -> String
testList ms = case ms of
  [] -> "  []\n"
  x:[] -> "  [ " ++ testMod x ++ " ]\n"
  x:xs -> line1 ++ concatMap lineRest xs ++ lineLast
    where
      line1 = "  [ " ++ testMod x ++ "\n"
      lineRest m = "  , " ++ testMod m ++ "\n"
      lineLast = "  ]\n"
  where
    testMod x = x ++ ".testTree"
