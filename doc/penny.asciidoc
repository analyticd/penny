= PENNY(1)
:doctype: manpage

== NAME

penny - print reports on Penny postings

== SYNOPSIS

*penny* ['GLOBAL_OPTIONS'] 'REPORT_NAME' ['REPORT_OPTIONS'] 'FILE..'

== DESCRIPTION

The penny(1) command reads one or more 'FILE' specified.  If there is
no 'FILE', or 'FILE' is '-', `penny` reads standard input.  Each
transaction in the given 'FILE' is split into several _clatch_, with
one _clatch_ per posting.  The _clatch_ contains the posting itself,
along with all the siblings of the given posting and related
transaction information.

Then, the list of all _clatch_ is filtered using criteria you specify
in the 'GLOBAL_OPTIONS', which yields a list of _slice_.  This allows
you to remove postings you are not interested in seeing.

The ordering of the options is important; that is, `penny -i -a
Checking` does not have the same meaning as `penny -a Checking -i`.

== GLOBAL OPTIONS

=== Pattern options

These options control the filtering of the list of _clatch_ into the
list of _slice_.

*-I, --case-insensitive*::

  Future patterns on the command line are case insensitive.  This is
  the default setting.

*-S, --case-sensitive*::

  Future patterns on the command line are case sensitive.

*--within*::

  Future patterns on the command line match if the given text is found
  anywhere within the target text.  This is the default setting.

*--exact*::

  Future patterns on the command line match if the given text exactly
  matches the target text (after adjusting for case sensitivity).

*-R, --regexp*::

  Future patterns on the command line use Perl-compatible regular
  expressions.

Futher actions on the _slice_ may occur depending on which 'REPORT'
you use.  Reports are as follows.

=== Filtering operands

Multiple filtering options must be combined using postfix operators.
Some options accept a 'BOOLEAN'.  Valid 'BOOLEAN' are `<`, `>`, `==`,
`>=`, `<=`, and `/=`.  For example: `-n '>' 5`.  You may need to quote
these characters, as they might have special meaning to your shell.

*-a, --account*='PATTERN'::

  The account name is transformed into a string, with a colon
  separating each sub-account; the given 'PATTERN' is matched against
  this string.  A posting with no account always returns false.

*-n, --number* 'BOOLEAN' 'NUMBER'::

  The posting's number field must match the given boolean condition.
  Any posting without a number always returns false.

*-f, --flag*='PATTERN'::

  The posting's flag must match the given pattern.  The parentheses
  that you entered into your Penny file are not included in the
  matching process.  A posting with no flag always returns False.

*-p, --payee*='PATTERN'::

  The posting's payee must match the given pattern.  A posting with no
  payee always returns False.

*-c, --commodity*='PATTERN'::

  The posting's commodity must match the given pattern.

*--debit*::

  True if the posting is a debit.

*--credit*::

  True if the posting is a credit.

*--zero*::

  True if the posting is zero (that is, neither a debit nor a credit.)

*-q, --qty* 'BOOLEAN' 'NUMBER'::

  The posting's quantity must match the given boolean condition.
  Valid 'BOOLEAN' are `<`, `>`, `==`, `>=`, `<=`, and `/=`.  For
  example:  `-n '>' 5`.  You may need to quote these characters, as
  they might have special meaning to your shell.

*-t, --tag*='PATTERN'::

  One of the posting's tags must match the given 'PATTERN'

*-d, --date* 'BOOLEAN' 'DATE'::

  The posting's date must match the given boolean condition.  Postings
  with no date return false.  No adjustments are made for time zones.

*--time* 'BOOLEAN' 'TIME'::

  The posting's time must match the given boolean condition.  Postings
  with no time return false.  No adjustments are made for time zones.

=== Sibling filtering

These options are the same as the similarly-named options above;
however, instead of matching against the posting, they match against the
siblings of a posting.

* *--s-account*='PATTERN'
* *--s-number* 'BOOLEAN' 'NUMBER'
* *--s-flag*='PATTERN'
* *--s-payee*='PATTERN'
* *--s-commodity*='PATTERN'
* *--s-debit*
* *--s-credit*
* *--s-zero*
* *--s-qty* 'BOOLEAN' 'NUMBER'
* *--s-tag* 'PATTERN'
* *--s-date* 'BOOLEAN' 'DATE'
* *--s-time* 'BOOLEAN' 'TIME'


=== Filtering operators

These operators are used when filtering.  To join operands together
you must use postfix notation.  Postfix eliminates confusing operator
precedence rules.

*--and*::

  Pop two operands from the stack, join them using an _and_ operator,
  and push the result back onto the stack.

*--or*::

  Pop two operands from the stack, join them using an _or_ operator,
  and push the result back onto the stack.

*--not*::

  Pop one operand from the stack, negate it, and push the result back
  onto the stack.

=== Sorting options

These options take a single option for 'FIELD', which may be one of
'account', 'number', 'flag', 'payee', 'commodity', 'side', 'qty',
'date', or 'time'.  Most of these are self explanatory.  'account' will
compare two accounts first by the first sub-account, then by the second
sub-account, and so on.  'qty' compares quantities after equalizing
their exponents; this means that, for example, `2.5` and `2.500` are
equivalent.

Each field may hold any kind of scalar.  Scalars of the same type are
compared against one another.  Scalars of different types are sorted in
the following order: text, date, time, zone, integer.

To sort by multiple fields (e.g. to sort first by date, and then by
payee if two postings have the same date), use multiple *--ascending* or
*--descending* options as appropriate.

*-A, --ascending*='FIELD'::

  Sort in ascending order by the given field

*-D, --descending*='FIELD'::

  Sort in descending order by the given field
