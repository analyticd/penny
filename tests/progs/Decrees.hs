-- | This module generated by the Quickpull package.
-- Quickpull is available at:
-- <http://www.github.com/massysett/quickpull>

module Decrees where

import Quickpull
import qualified Penny.Lincoln.Decimal.Tests
import qualified Penny.Lincoln.Natural.Tests

decrees :: [Decree]
decrees =

  [ Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 40, qName = "prop_addIsAssociative"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_addIsAssociative )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 43, qName = "prop_addIsCommutative"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_addIsCommutative )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 46, qName = "prop_xPlusYMinusY"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_xPlusYMinusY )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 49, qName = "prop_addLeftZero"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_addLeftZero )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 52, qName = "prop_DecimalOneEquivalentToOne"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_DecimalOneEquivalentToOne )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 55, qName = "prop_DecimalZeroEquivalentToZero"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_DecimalZeroEquivalentToZero )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 58, qName = "prop_multiplyIsAssociative"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_multiplyIsAssociative )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 61, qName = "prop_multiplyIsCommutative"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_multiplyIsCommutative )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 64, qName = "prop_multiplyLeftDecimalOne"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_multiplyLeftDecimalOne )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 67, qName = "prop_multiplyByZeroIsZero"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_multiplyByZeroIsZero )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 70, qName = "prop_increaseExponentExponentIsCorrect"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_increaseExponentExponentIsCorrect )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 77, qName = "prop_increaseExponentIsEquivIfIncreased"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_increaseExponentIsEquivIfIncreased )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 100, qName = "prop_equalizeExponentsChangesOnlyOneOperand"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_equalizeExponentsChangesOnlyOneOperand )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 103, qName = "prop_equalizeExponentsSameExponent"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_equalizeExponentsSameExponent )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 106, qName = "prop_equalizeExponentsOnlyIncreasesExponent"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_equalizeExponentsOnlyIncreasesExponent )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 111, qName = "prop_equalizeExponentOnlyIncreasesSignificandAbs"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_equalizeExponentOnlyIncreasesSignificandAbs )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 116, qName = "prop_equalizeExponentsLeftResultEquivalent"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_equalizeExponentsLeftResultEquivalent )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 119, qName = "prop_equalizeExponentsRightResultEquivalent"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_equalizeExponentsRightResultEquivalent )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 122, qName = "prop_doubleNegate"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_doubleNegate )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 124, qName = "prop_absAndSignum"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_absAndSignum )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 126, qName = "prop_fromIntegerNoExponent"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_fromIntegerNoExponent )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Decimal/Tests.hs", modName = ["Penny","Lincoln","Decimal","Tests"]}, linenum = 130, qName = "prop_fromIntegerSameSignificand"} ) ( Single Penny.Lincoln.Decimal.Tests.prop_fromIntegerSameSignificand )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 33, qName = "prop_nextPrevGivesSameNumberUnsigned"} ) ( Single Penny.Lincoln.Natural.Tests.prop_nextPrevGivesSameNumberUnsigned )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 36, qName = "prop_nextPrevGivesSameNumberPositive"} ) ( Single Penny.Lincoln.Natural.Tests.prop_nextPrevGivesSameNumberPositive )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 43, qName = "prop_addIsAssociativeUnsigned"} ) ( Single Penny.Lincoln.Natural.Tests.prop_addIsAssociativeUnsigned )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 46, qName = "prop_addIsAssociativePositive"} ) ( Single Penny.Lincoln.Natural.Tests.prop_addIsAssociativePositive )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 56, qName = "prop_multIsAssociativeUnsigned"} ) ( Single Penny.Lincoln.Natural.Tests.prop_multIsAssociativeUnsigned )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 59, qName = "prop_multIsAssociativePositive"} ) ( Single Penny.Lincoln.Natural.Tests.prop_multIsAssociativePositive )
  , Decree ( Meta {modDesc = ModDesc {modPath = "lib/Penny/Lincoln/Natural/Tests.hs", modName = ["Penny","Lincoln","Natural","Tests"]}, linenum = 62, qName = "prop_monusReturnsValidUnsigned"} ) ( Single Penny.Lincoln.Natural.Tests.prop_monusReturnsValidUnsigned )
  ]
